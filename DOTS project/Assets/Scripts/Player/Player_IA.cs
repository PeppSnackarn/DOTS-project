//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player_IA.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_IA: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_IA()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_IA"",
    ""maps"": [
        {
            ""name"": ""Move&Shoot"",
            ""id"": ""0de9fb1f-d864-43ee-890d-93baa022d170"",
            ""actions"": [
                {
                    ""name"": ""WASDMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""789fac7a-d5f4-49bd-8a81-35c110289238"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""82861c8d-1b98-4942-9f4b-b55e2567dd14"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""0d9c7687-01ed-44f1-b8fb-fb69d168fcf0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASDMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc137451-43e7-4eb9-9607-ab2fd37db94b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASDMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6e217c9d-bb20-456e-b3db-149aa9763d7c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASDMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3897b0e2-bf13-4763-b7e8-c87f82a88e50"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASDMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""acd4c5e3-39cc-43b0-8c62-cd6c0302bc33"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WASDMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4a8ebc5a-febd-4503-a37b-77c4af480aa5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Move&Shoot
        m_MoveShoot = asset.FindActionMap("Move&Shoot", throwIfNotFound: true);
        m_MoveShoot_WASDMove = m_MoveShoot.FindAction("WASDMove", throwIfNotFound: true);
        m_MoveShoot_Shoot = m_MoveShoot.FindAction("Shoot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Move&Shoot
    private readonly InputActionMap m_MoveShoot;
    private List<IMoveShootActions> m_MoveShootActionsCallbackInterfaces = new List<IMoveShootActions>();
    private readonly InputAction m_MoveShoot_WASDMove;
    private readonly InputAction m_MoveShoot_Shoot;
    public struct MoveShootActions
    {
        private @Player_IA m_Wrapper;
        public MoveShootActions(@Player_IA wrapper) { m_Wrapper = wrapper; }
        public InputAction @WASDMove => m_Wrapper.m_MoveShoot_WASDMove;
        public InputAction @Shoot => m_Wrapper.m_MoveShoot_Shoot;
        public InputActionMap Get() { return m_Wrapper.m_MoveShoot; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveShootActions set) { return set.Get(); }
        public void AddCallbacks(IMoveShootActions instance)
        {
            if (instance == null || m_Wrapper.m_MoveShootActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MoveShootActionsCallbackInterfaces.Add(instance);
            @WASDMove.started += instance.OnWASDMove;
            @WASDMove.performed += instance.OnWASDMove;
            @WASDMove.canceled += instance.OnWASDMove;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
        }

        private void UnregisterCallbacks(IMoveShootActions instance)
        {
            @WASDMove.started -= instance.OnWASDMove;
            @WASDMove.performed -= instance.OnWASDMove;
            @WASDMove.canceled -= instance.OnWASDMove;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
        }

        public void RemoveCallbacks(IMoveShootActions instance)
        {
            if (m_Wrapper.m_MoveShootActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMoveShootActions instance)
        {
            foreach (var item in m_Wrapper.m_MoveShootActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MoveShootActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MoveShootActions @MoveShoot => new MoveShootActions(this);
    public interface IMoveShootActions
    {
        void OnWASDMove(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
    }
}
